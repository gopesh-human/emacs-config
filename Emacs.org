#+TITLE: My Emacs Config
#+AUTHOR: Gopesh Sharma
#+PROPERTY: header-args :tangle "~/.config/emacs/init.el"

* TODO TODO
- [X] Basic UI Settings
- [ ] Set up basic packages.
  - [ ] Evil
  - [ ] Vertico
    - [ ] Orderless
    - [ ] Marginalia
  - [ ] All-The-Icons
  - [ ] Magit
  - [ ] Whick Key
- [ ] Set up a nice modeline (custom)
- [ ] Boxes around windows


* TODO PACKAGE MANAGEMENT


* CORE
** Early Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.config/emacs/early-init.el"
:END:
This code goes into early-init.el.
#+begin_src emacs-lisp
(setq
 site-run-file nil                         ; No site-wide run-time initializations. 
 inhibit-default-init t                    ; No site-wide default library
 gc-cons-threshold most-positive-fixnum    ; Very large threshold for garbage
                                        ; collector during init
 package-enable-at-startup nil)            ; We'll use straight.el

(setq native-comp-eln-load-path
      (list (expand-file-name "eln-cache" user-emacs-directory)))

;; Reset garbage collector limit after init process has ended (8Mo)
(add-hook 'after-init-hook
          #'(lambda () (setq gc-cons-threshold (* 8 1024 1024))))
#+end_src

** Startup
#+begin_src emacs-lisp
(setq-default
 inhibit-startup-screen t               ; Disable start-up screen
 inhibit-startup-message t              ; Disable startup message
 inhibit-startup-echo-area-message t    ; Disable initial echo message
 initial-scratch-message ""             ; Empty the initial *scratch* buffer
 initial-buffer-choice t)               ; Open *scratch* buffer at init
#+end_src

** Encoding
We tell emacs to use UTF-8 encoding as much as possible.
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
(prefer-coding-system       'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment   "English")
#+end_src

** Recovery
#+begin_src emacs-lisp
(setq auto-save-list-file-prefix
      (expand-file-name ".auto-same-list/.saves-" user-emacs-directory))
#+end_src

** Backup
#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name "backups" user-emacs-directory)))
      make-backup-files         t
      vc-make-backup-files      t
      backup-by-copying         t
      version-control           t
      delete-old-versions       t
      kept-old-versions         6
      kept-new-versions         9
      delete-by-moving-to-trash t)
#+end_src

** Recent Files
#+begin_src emacs-lisp
(require 'recentf)

(setq recentf-max-menu-items 10
      recentf-max-saved-items 100
      recentf-exclude '("~/docs/mail.+" "~/docs/Notes.+"))
#+end_src

** History
We save every possible history we can think of.
#+begin_src emacs-lisp
(require 'savehist)

(setq kill-ring-max 50
	  history-length 50)

(setq savehist-additional-variables
	  '(kill-ring
	    command-history
	    set-variable-value-history
	    custom-variable-history   
	    query-replace-history     
	    read-expression-history   
	    minibuffer-history        
	    read-char-history         
	    face-name-history         
	    bookmark-history
	    file-name-history))

(put 'minibuffer-history         'history-length 50)
(put 'file-name-history          'history-length 50)
(put 'set-variable-value-history 'history-length 25)
(put 'custom-variable-history    'history-length 25)
(put 'query-replace-history      'history-length 25)
(put 'read-expression-history    'history-length 25)
(put 'read-char-history          'history-length 25)
(put 'face-name-history          'history-length 25)
(put 'bookmark-history           'history-length 25)
#+end_src

No duplicates in history.
#+begin_src emacs-lisp
(setq history-delete-duplicates t)
#+end_src

Start history mode.
#+begin_src emacs-lisp
(let (message-log-max)
  (savehist-mode))
#+end_src

** Cursor
Record cursor position from one session to the other.
#+begin_src emacs-lisp
(setq save-place-file (expand-file-name "saveplace" user-emacs-directory)
      save-place-forget-unreadable-files t)

(save-place-mode 1)
#+end_src

** Customization
Since init.el will be generated from this file, we save customizations in a dedicated file.
#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))

(when (file-exists-p custom-file)
  (load custom-file nil t))
#+end_src


* Interface
** Frame
Default frame geometry
#+begin_src emacs-lisp
(require 'frame)

;; Default frame settings
(setq default-frame-alist '((min-height . 1)  '(height . 45)
                            (min-width  . 1)  '(width  . 81)
                            (vertical-scroll-bars . nil)
                            (internal-border-width . 24)
                            (left-fringe . 0)
                            (right-fringe . 0)
                            (tool-bar-lines . 0)
                            (menu-bar-lines . 0)))
(setq initial-frame-alist default-frame-alist)
#+end_src

** Window
Margin and divider mode
#+begin_src emacs-lisp
(setq-default window-divider-default-right-width 12
              window-divider-default-bottom-width 12
              window-divider-default-places t
              left-margin-width 0
              right-margin-width 0
              window-combination-resize nil) ; Do not resize windows proportionally

(window-divider-mode 1)
#+end_src

** Buffer
Size of temporary buffers
#+begin_src emacs-lisp
(temp-buffer-resize-mode)
(setq temp-buffer-max-height 8)
#+end_src

Unique buffer names
#+begin_src emacs-lisp
(require 'uniquify)

(setq uniquify-buffer-name-style 'reverse
      uniquify-separator " • "
      uniquify-after-kill-buffer-p t
      uniquify-ignore-buffers-re "^\\*")
#+end_src

No question after killing a buffer
#+begin_src emacs-lisp
(bind-key "C-x k" #'kill-current-buffer)
#+end_src

** File
Follow symlinks without prompt
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

** Dialogs
Emacs can use a large number of dialogs and popups. Here we get rid of them.
#+begin_src emacs-lisp
(setq-default show-help-function nil    ; No help text
              use-file-dialog nil       ; No file dialog
              use-dialog-box nil        ; No dialog box
              pop-up-windows nil)       ; No popup windows

(tooltip-mode -1)                       ; No tooltips
(scroll-bar-mode -1)                    ; No scroll bars
(tool-bar-mode -1)                      ; No toolbar
#+end_src

** Line number
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Keyboard
The mode displays the key bindings following your currently entered incomplete command in a popop.
#+begin_src emacs-lisp
(require 'which-key)

(which-key-mode)
#+end_src

** Text
#+begin_src emacs-lisp
(setq-default use-short-answers t                     ; Replace yes/no prompts with y/n
              confirm-nonexistent-file-or-buffer nil) ; Ok to visit non-existant files
#+end_src

Replace region when inserting text
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

** Sound
Disable bell (visual and auditory).
#+begin_src emacs-lisp
(setq-default visible-bell nil            ; No visual bell
              ring-bell-function 'ignore) ; No bell
#+end_src

** Mouse
Mouse behavior can be finely controlled using the mouse-avoidance-mode.
#+begin_src emacs-lisp
(setq-default mouse-yank-at-point t) ; Yank at point rather than pointer
(mouse-avoidance-mode 'exile)        ; Avoid collision of mouse with point.
#+end_src

** Scroll
#+begin_src emacs-lisp
(setq-default scroll-conservatively 101
              scroll-margin 2
              recenter-positions `(5 bottom))
(pixel-scroll-precision-mode 1)
#+end_src

** Clipboard
Allow system and Emacs clipboard to communicate smoothly.
#+begin_src emacs-lisp
(setq-default select-enable-clipboard t)
#+end_src


* Visual
** TODO Color

** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "IBM Plex Mono"
                    :weight 'semi-bold
                    :height 112)
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'org-mode-hook  'rainbow-delimiters-mode)
#+end_src

** TODO Typography
#+begin_src emacs-lisp
(setq-default fill-column 80                          ; Default line width
              sentence-end-double-space nil           ; Use a single space after dots
              bidi-paragraph-direction 'left-to-right ; Faster
              truncate-string-ellipsis "…")           ; Nicer ellipsis
#+end_src

Changing the symbol for truncation (…) and warp (↩).
#+begin_src emacs-lisp

#+end_src

Make sure underline is positioned at the very bottom.
#+begin_src emacs-lisp

#+end_src
